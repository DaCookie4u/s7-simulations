FUNCTION_BLOCK "801_virt_Sortieranlage"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      PAA_AW0 : Word;
      PAA_U1 : Word;
   END_VAR

   VAR_OUTPUT 
      PAE_EW0 : Word;
      PAE_B8 : Word;
      PAE_B9 : Word;
   END_VAR

   VAR 
      DI : Struct
         A1 : Bool;
         K0 : Bool;
         S0 : Bool;
         S1 : Bool;
         S2 : Bool;
         B1 : Bool;
         B2 : Bool;
         B3 : Bool;
         B4 : Bool;
         B5 : Bool;
         B6 : Bool;
         B7 : Bool;
         S3 : Bool;
         S4 : Bool;
         S5 : Bool;
         S6 : Bool;
      END_STRUCT;
      DI_Word { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT DI : Word;
      AI_B8 : Int;
      AI_B9 : Int;
      DQ : Struct
         Q1 : Bool;
         Q2 : Bool;
         Q3 : Bool;
         M2 : Bool;
         M3 : Bool;
         P1 : Bool;
         P2 : Bool;
         P3 : Bool;
         P4 : Bool;
         P5 : Bool;
         P6 : Bool;
         P7 : Bool;
         RES14 : Bool;
         RES15 : Bool;
         RES16 : Bool;
         RES17 : Bool;
      END_STRUCT;
      DQ_word { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT DQ : Word;
      AQ_U1 : Int;
      Simulation_Reset : Bool := true;
      Part_Reset : Bool;
      Part_is_metal : Bool;
      Dynamic_RPM_via_U1 : Bool;
      Motor_is_on : Bool;
      B8_RPM : Real;
      B9_RPM : Real;
      U1_RPM : Real;
      Part_Offset_X : Int;
      Part_Offset_Y : Int;
      Cylinder_Offset_Y : Int;
      Sliding_Pulse_Off {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Sliding_Pulse_On {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Sliding_Pulse_On_Memory : Bool;
      Motor_Pulse_Width_Dynamic : Time;
      Motor_Pulse_Off {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Motor_Pulse_On {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Motor_Pulse_On_Memory : Bool;
      Reset_Delay {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      Cylinder_Pulse_Off {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Cylinder_Pulse_On {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TOF_TIME;
      Cylinder_Pulse_On_Memory : Bool;
      U1_Memory : Int;
      B9_Memory : Real;
      Dynamic_RPM_Memory : Real;
      Dynamic_RPM : Real;
   END_VAR

   VAR_TEMP 
      Part_On_Conveyor : Bool;
      Part_sliding_on_X : Bool;
      Part_in_metal_container : Bool;
      Part_Move_Fwd_OK : Bool;
      Part_Move_Rwd_OK : Bool;
      Part_front_of_cylinder : Bool;
      Cylinder_Move_Out : Bool;
   END_VAR

   VAR CONSTANT 
      Pulse_Width_Sliding : Time := T#20MS;
      Pulse_Width_Motor_Fixed : Time := T#10MS;
      Pulse_Width_Cylinder : Time := T#5MS;
      Conveyor_Start_Offset : Int := 150;
      Conveyor_End_Offset : Int := 720;
      Part_Offset_X_End : Int := 740;
      Part_Offset_Y_End : Int := 60;
      Cylinder_Offset_Y_End : Int := 75;
      Conveyor_Top_Border : Int := 41;
      Conveyor_Bottom_Border : Int := 77;
      Cylinder_Collision_Left : Int := 440;
      Cylinder_Collision_Right : Int := 470;
   END_VAR


BEGIN
	// Temporäre Variablen initialisieren
	#Part_On_Conveyor := FALSE;
	#Part_sliding_on_X := FALSE;
	#Part_in_metal_container := FALSE;
	#Part_Move_Fwd_OK := FALSE;
	#Part_Move_Rwd_OK := FALSE;
	#Part_front_of_cylinder := FALSE;
	#Cylinder_Move_Out := FALSE;
	
	// PAA einlesen
	#DQ_word := #PAA_AW0;
	#AQ_U1 := WORD_TO_INT(#PAA_U1);
	
	// Initialisierung der Simulation
	IF #Simulation_Reset THEN
	    // Eingänge auf die Startwerte setzen
	    #DI.S0 := FALSE;
	    #DI.S1 := FALSE;
	    #DI.S2 := TRUE;
	    #DI.S3 := FALSE;
	    #DI.S4 := FALSE;
	    #DI.S5 := FALSE;
	    #DI.S6 := FALSE;
	    #DI.A1 := FALSE;
	    #DI.K0 := FALSE;
	    
	    // Zylinder einfahren
	    #Cylinder_Offset_Y := #Cylinder_Offset_Y_End;
	    
	    // Einstellungen auf die Startwerte setzen
	    #B9_RPM := 25.0;
	    #Dynamic_RPM := 0.0;
	    #Dynamic_RPM_via_U1 := FALSE;
	    
	    // Flankenmerker zurücksetzen
	    #U1_Memory := 0;
	    
	    // Teil zurücksetzen
	    #Part_Reset := TRUE;
	END_IF;
	#Simulation_Reset := FALSE;
	
	// Zurücksetzen des Teiles
	IF #Part_Reset THEN
	    #Part_Offset_Y := #Part_Offset_Y_End;
	    #Part_Offset_X := 0;
	    #Part_is_metal := NOT #Part_is_metal;
	END_IF;
	#Part_Reset := FALSE;
	
	// AQ_U1 auswerten
	IF #AQ_U1 <> #U1_Memory THEN
	    #U1_RPM := SCALE_X_REAL(MIN := 0.0, MAX := 50.0, VALUE := NORM_X_REAL(MIN := 0, MAX := 27648, VALUE := #AQ_U1));
	END_IF;
	#U1_Memory := #AQ_U1;
	
	// #B9_RPM auswerten
	#B9_RPM := LIMIT(IN := #B9_RPM, MN := -50.0, MX := 50.0);
	
	// #Motor_Pulse_Width_Dynamic berechnen
	IF (#Dynamic_RPM_via_U1 AND #Dynamic_RPM <> #U1_RPM) THEN
	    #Dynamic_RPM := #U1_RPM;
	ELSIF (NOT #Dynamic_RPM_via_U1 AND #Dynamic_RPM <> #B9_RPM) THEN
	    #Dynamic_RPM := #B9_RPM;
	END_IF;
	
	IF #Dynamic_RPM <> #Dynamic_RPM_Memory THEN
	    IF #Dynamic_RPM < 0 THEN
	        #Motor_Pulse_Width_Dynamic := DINT_TO_TIME(REAL_TO_DINT(500.0 / (7200.0 * #Dynamic_RPM / 3600.0) * -1));
	    ELSIF #Dynamic_RPM > 0 THEN
	        #Motor_Pulse_Width_Dynamic := DINT_TO_TIME(REAL_TO_DINT(500.0 / (7200.0 * #Dynamic_RPM / 3600.0)));
	    ELSE
	        #Motor_Pulse_Width_Dynamic := T#0MS;
	    END_IF;
	    RESET_TIMER(#Motor_Pulse_On);
	    RESET_TIMER(#Motor_Pulse_Off);
	END_IF;
	#Dynamic_RPM_Memory := #Dynamic_RPM;
	
	// Region des Teiles bestimmen
	IF #Part_Offset_X >= #Conveyor_Start_Offset AND #Part_Offset_X <= #Conveyor_End_Offset
	    AND #Part_Offset_Y <= #Conveyor_Bottom_Border AND #Part_Offset_Y >= #Conveyor_Top_Border THEN
	    #Part_On_Conveyor := TRUE;
	END_IF;
	
	IF (#Part_Offset_X < #Conveyor_Start_Offset OR #Part_Offset_X > #Conveyor_End_Offset)
	    AND #Part_Offset_Y <= #Conveyor_Bottom_Border AND #Part_Offset_Y >= #Conveyor_Top_Border THEN
	    #Part_sliding_on_X := TRUE;
	END_IF;
	
	IF #Part_Offset_X >= 437 AND #Part_Offset_X <= 473
	    AND #Part_Offset_Y <= 15 THEN
	    #Part_in_metal_container := TRUE;
	END_IF;
	
	IF #Part_Offset_X >= #Cylinder_Collision_Left AND #Part_Offset_X <= #Cylinder_Collision_Right AND #Cylinder_Offset_Y <= #Part_Offset_Y + 2 THEN
	    #Part_front_of_cylinder := TRUE;
	END_IF;
	
	// Überprüfen, ob die X-Koordinate verändert werden darf
	IF #Part_Offset_Y <= #Cylinder_Offset_Y - 2 OR #Part_Offset_X < 430 OR #Part_Offset_X >= 480 THEN
	    #Part_Move_Fwd_OK := TRUE;
	END_IF;
	
	IF #Part_Offset_Y <= #Cylinder_Offset_Y - 2 OR #Part_Offset_X <= 430 OR #Part_Offset_X > 480 THEN
	    #Part_Move_Rwd_OK := TRUE;
	END_IF;
	
	// Pulse für die automatische X-Bewegung erzeugen
	IF #Part_sliding_on_X THEN
	    #Sliding_Pulse_Off(IN := #Sliding_Pulse_On.Q,
	                       PT := #Pulse_Width_Sliding);
	    #Sliding_Pulse_On(IN := NOT #Sliding_Pulse_Off.Q,
	                      PT := #Pulse_Width_Sliding);
	ELSE
	    RESET_TIMER(#Sliding_Pulse_Off);
	    RESET_TIMER(#Sliding_Pulse_On);
	END_IF;
	
	// Pulse für die X-Bewegung durch den Motor erzeugen
	IF (#DQ.Q1 XOR #DQ.Q2) AND NOT #DQ.Q3 THEN
	    #Motor_Pulse_Off(IN := #Motor_Pulse_On.Q,
	                     PT := #Pulse_Width_Motor_Fixed);
	    #Motor_Pulse_On(IN := NOT #Motor_Pulse_Off.Q,
	                    PT := #Pulse_Width_Motor_Fixed);
	    #B8_RPM := 25.0;
	    #Motor_is_on := TRUE;
	ELSIF #DQ.Q3 AND NOT #DQ.Q1 AND NOT #DQ.Q2 THEN
	    IF #Dynamic_RPM <> 0.0 THEN
	        #Motor_Pulse_Off(IN := #Motor_Pulse_On.Q,
	                         PT := #Motor_Pulse_Width_Dynamic);
	        #Motor_Pulse_On(IN := NOT #Motor_Pulse_Off.Q,
	                        PT := #Motor_Pulse_Width_Dynamic);
	        #B8_RPM := #Dynamic_RPM;
	    ELSE
	        #B8_RPM := 0.0;
	    END_IF;
	    #Motor_is_on := TRUE;
	ELSE
	    RESET_TIMER(#Motor_Pulse_On);
	    RESET_TIMER(#Motor_Pulse_Off);
	    #B8_RPM := 0.0;
	    #Motor_is_on := FALSE;
	END_IF;
	
	// Teil auf der X-Achse bewegen
	IF #Part_sliding_on_X AND #Sliding_Pulse_On.Q AND NOT #Sliding_Pulse_On_Memory THEN
	    #Part_Offset_X := #Part_Offset_X + 1;
	ELSIF #Part_On_Conveyor AND #Motor_Pulse_On.Q AND NOT #Motor_Pulse_On_Memory AND (#DQ.Q1 OR #DQ.Q2 OR #DQ.Q3) THEN
	    IF #Part_Move_Fwd_OK AND (#DQ.Q1 OR (#DQ.Q3 AND #Dynamic_RPM > 0.0)) THEN
	        #Part_Offset_X := #Part_Offset_X + 1;
	    ELSIF #Part_Move_Rwd_OK AND (#DQ.Q2 OR (#DQ.Q3 AND #Dynamic_RPM < 0.0)) THEN
	        #Part_Offset_X := #Part_Offset_X - 1;
	    END_IF;
	END_IF;
	#Sliding_Pulse_On_Memory := #Sliding_Pulse_On.Q;
	#Motor_Pulse_On_Memory := #Motor_Pulse_On.Q;
	
	// Zylinder steuern
	IF #DQ.M2 AND NOT #DQ.M3 THEN
	    #Cylinder_Move_Out := FALSE;
	ELSIF #DQ.M3 AND NOT #DQ.M2 THEN
	    #Cylinder_Move_Out := TRUE;
	END_IF;
	
	// Puls erzeugen, die Ventile angesteuert werden
	IF #DQ.M2 XOR #DQ.M3 THEN
	    #Cylinder_Pulse_Off(IN := #Cylinder_Pulse_On.Q,
	                        PT := #Pulse_Width_Cylinder);
	    #Cylinder_Pulse_On(IN := NOT #Cylinder_Pulse_Off.Q,
	                       PT := #Pulse_Width_Cylinder);
	ELSE
	    RESET_TIMER(#Cylinder_Pulse_Off);
	    RESET_TIMER(#Cylinder_Pulse_On);
	END_IF;
	
	IF #Cylinder_Pulse_On.Q AND NOT #Cylinder_Pulse_On_Memory THEN
	    IF NOT #Cylinder_Move_Out THEN
	        #Cylinder_Offset_Y := #Cylinder_Offset_Y + 1;
	    ELSIF #Cylinder_Move_Out THEN
	        #Cylinder_Offset_Y := #Cylinder_Offset_Y - 1;
	    END_IF;
	END_IF;
	#Cylinder_Pulse_On_Memory := #Cylinder_Pulse_On.Q;
	
	// Teil auf der Y-Achse bewegen
	IF #Part_Offset_X >= #Cylinder_Collision_Left AND #Part_Offset_X <= #Cylinder_Collision_Right
	    AND #Cylinder_Offset_Y <= #Part_Offset_Y + 2
	    AND #Cylinder_Move_Out THEN
	    #Part_Offset_Y := #Cylinder_Offset_Y - 2;
	END_IF;
	
	// Koordinaten begrenzen
	#Part_Offset_X := LIMIT(IN := #Part_Offset_X, MN := 0, MX := #Part_Offset_X_End);
	#Part_Offset_Y := LIMIT(IN := #Part_Offset_Y, MN := 0, MX := #Part_Offset_Y_End);
	#Cylinder_Offset_Y := LIMIT(IN := #Cylinder_Offset_Y, MN := 0, MX := #Cylinder_Offset_Y_End);
	
	// Teil zurücksetzen sofern es in einem der Behälter gelandet ist
	#Reset_Delay(IN := (#Part_Offset_X >= #Part_Offset_X_End OR #Part_in_metal_container),
	             PT := T#3S);
	#Part_Reset := #Reset_Delay.Q;
	
	// Sensoren steuern
	#DI.B1 := (#Cylinder_Offset_Y >= 75);
	#DI.B2 := NOT (#Cylinder_Offset_Y <= 0);
	#DI.B3 := #Motor_Pulse_On.Q;
	#DI.B4 := (#Part_Offset_X >= 150 AND #Part_Offset_X <= 165);
	#DI.B5 := (#Part_is_metal AND #Part_Offset_X >= 250 AND #Part_Offset_X <= 260);
	#DI.B6 := (#Part_Offset_X >= 421 AND #Part_Offset_X <= 454);
	#DI.B7 := (#Part_Offset_X >= 695 AND #Part_Offset_X <= #Conveyor_End_Offset);
	#AI_B8 := SCALE_X_INT(MIN := 0, MAX := 27648, VALUE := NORM_X_REAL(MIN := 0.0, MAX := 50.0, VALUE := #B8_RPM));
	#AI_B9 := SCALE_X_INT(MIN := 0, MAX := 27648, VALUE := NORM_X_REAL(MIN := 0.0, MAX := 50.0, VALUE := #B9_RPM));
	
	// PAE
	#PAE_EW0 := #DI_Word;
	#PAE_B8 := INT_TO_WORD(#AI_B8);
	#PAE_B9:= INT_TO_WORD(#AI_B9);
END_FUNCTION_BLOCK


FUNCTION_BLOCK "800_virt_Reaktor"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      PAA_AB0 : Byte;
   END_VAR

   VAR_OUTPUT 
      PAE_EB0 : Byte;
      PAE_EW64 : Int;
   END_VAR

   VAR 
      DI : Struct
         S1 : Bool;
         S2 : Bool;
         S3 : Bool;
         S4 : Bool;
         S5 : Bool;
         RESET : Bool;
         S6 : Bool := true;
         RES7 : Bool;
      END_STRUCT;
      DI_Byte { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT DI : Byte;
      AI_B1 : Int;
      DQ : Struct
         Y1 : Bool;
         Y2 : Bool;
         Y3 : Bool;
         H : Bool;
         M : Bool;
         RES05 : Bool;
         RES06 : Bool;
         RES07 : Bool;
      END_STRUCT;
      DQ_Byte { S7_HMI_Accessible := 'False'; S7_HMI_Visible := 'False'} AT DQ : Byte;
      Reset_Simulation : Bool := true;
      Pause_Simulation : Bool;
      Fuellstand : Real;
      Temperatur : Real;
      Abtastzyklus {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      Speicher_Abtastflanke : Bool;
   END_VAR

   VAR_TEMP 
      Fuellstand_kP : Real;
      Heizung_n : Real;
   END_VAR

   VAR CONSTANT 
      Niveau_1 : Int := 40;
      Niveau_2 : Int := 75;
      Temperatur_Min : Int := 20;
      Temperatur_Max : Int := 60;
      Temperatur_S5_An : Int := 45;
      Temperatur_S5_Aus : Int := 44;
   END_VAR


BEGIN
	(*
	  Simulation eines Reaktors
	  
	  Ansteuerbare Aktuatoren, sofern %AB0 an den Eingang #PAA_AB0 angeschlossen wurde:
	  %A0.0   Y1      Zulaufventil 1
	  %A0.1   Y2      Zulaufventil 2
	  %A0.3   Y3      Ablassventil
	  %A0.4   Y4      Heizung
	  %A0.5   Y5      Rührmotor
	  
	  Simulierte digitale Sensoren und Taster, sofern %EB0 an den Ausgang #PAE_EB0 angeschlossen wurde:
	  %E0.0   S1      Taster S1 (NO)
	  %E0.1   S2      Leermeldung (NO, meldet TRUE bei leerem Tank)
	  %E0.2   S3      Niveaumeldung 1 (NO)
	  %E0.3   S4      Niveaumeldung 2 (NO)
	  %E0.4   S5      Temperaturmeldung (NO, meldet TRUE bei Solltemperatur)
	  %E0.5   RESET   Taster RESET (NO)
	  %E0.6   S6      Taster S6 (NC)
	  
	  Simulierte analoge Sensoren, sofern %EW64 an den Ausgang #PAE_EW64 angeschlossen wurde:
	  %EW64   B1      Füllstandssensor (0..10V)
	*)
	
	// Übernahme des PAA
	#DQ_Byte := #PAA_AB0;
	
	// Initialisierung der Simulation
	IF #Reset_Simulation THEN
	    #DI.S1 := FALSE;
	    #DI.RESET := FALSE;
	    #DI.S6 := TRUE;
	    
	    #Fuellstand := 0;
	    #Temperatur := 0;
	END_IF;
	#Reset_Simulation := FALSE;
	
	// Abtastzyklus und dessen Flanke erzeugen
	#Abtastzyklus(IN := NOT #Speicher_Abtastflanke,
	              PT := T#100MS,
	              Q => #Speicher_Abtastflanke);
	
	IF NOT #Speicher_Abtastflanke OR #Pause_Simulation THEN
	    RETURN;
	END_IF;
	
	// Behälter füllen bzw. entleeren
	IF #DQ.Y1 OR #DQ.Y2 OR #DQ.Y3 THEN
	    #Fuellstand_kP := BOOL_TO_INT(#DQ.Y1) * 500 + BOOL_TO_INT(#DQ.Y2) * 500 - BOOL_TO_INT(#DQ.Y3) * 500;
	    #Fuellstand := #Fuellstand + #Fuellstand_kP / 1000;
	    #Fuellstand := LIMIT(IN := #Fuellstand, MN := 0, MX := 100);
	END_IF;
	
	// Temperatur berechnen
	IF #DQ.H THEN
	    #Heizung_n := 3 * (#Fuellstand + 1);
	    #Temperatur := ((#Temperatur_Max - #Temperatur) / #Heizung_n) + #Temperatur;
	ELSIF NOT #DQ.H THEN
	    #Heizung_n := #Fuellstand ** 2 + 1;
	    #Temperatur := ((#Temperatur_Min - #Temperatur) / #Heizung_n) + #Temperatur;
	END_IF;
	#Temperatur := LIMIT(IN := #Temperatur, MN := #Temperatur_Min, MX := #Temperatur_Max);
	
	// Sensoren auswerten
	#AI_B1 := SCALE_X_INT(MIN := 0, MAX := 27648, VALUE := NORM_X_REAL(MIN := 0, MAX := 100, VALUE := #Fuellstand));
	#DI.S2 := (#Fuellstand = 0);
	#DI.S3 := (#Fuellstand >= #Niveau_1);
	#DI.S4 := (#Fuellstand >= #Niveau_2);
	#DI.S5 := (#Temperatur >= #Temperatur_S5_An AND NOT #DI.S5) OR (#Temperatur >= #Temperatur_S5_Aus AND #DI.S5);
	
	// PAE ausgeben
	#PAE_EB0 := #DI_Byte;
	#PAE_EW64 := #AI_B1;
END_FUNCTION_BLOCK


FUNCTION_BLOCK "803_virt_EBT_2019_AT2"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      PAA_AB0 : Byte;
   END_VAR

   VAR_OUTPUT 
      PAE_EW0 : Word;
      PAE_EW64 : Word;
   END_VAR

   VAR 
      DI : Struct
         S1 : Bool;
         S2 : Bool;
         S3 : Bool;
         S4 : Bool;
         RES04 : Bool;
         B1 : Bool;
         B2 : Bool;
         B3 : Bool;
         B11 : Bool;
         B12 : Bool;
         RES12 : Bool;
         RES13 : Bool;
         RES14 : Bool;
         RES15 : Bool;
         RES16 : Bool;
         RES17 : Bool;
      END_STRUCT;
      AI_B13 : Int;
      DQ : Struct
         M1 : Bool;
         M2 : Bool;
         M3 : Bool;
         M4 : Bool;
         P1 : Bool;
         P2 : Bool;
         P3 : Bool;
         P4 : Bool;
      END_STRUCT;
      Reset_Simulation : Bool := true;
      Pause_Simulation : Bool;
      MSR_M1 : Bool;
      MSS_M3 : Bool;
      MSS_M4 : Bool;
      Regenwasserzulauf : Bool := 0;
      Fuellstand : Real := 52.3;
      Abtastzyklus {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      Speicher_Abtastflanke : Bool;
      MSR_M1_Timer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      MSS_M3_Timer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
      MSS_M4_Timer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      Fuellstand_kP : Real;
   END_VAR

   VAR CONSTANT 
      Niveau_min_M1 : Real := 13.0;
      Niveau_min_M34 : Real := 8.0;
   END_VAR


BEGIN
	(*
	  Simulation eines Reaktors
	  
	  Ansteuerbare Aktuatoren, ausgehend von %AB0 am Eingang #PAA_AB0:
	  %A0.0   M1      Pumpe "Nutzwasser"
	  %A0.1   M2      Ventil "Nutzwasser"
	  %A0.2   M3      Pumpe "Abwasser 1"
	  %A0.3   M4      Pumpe "Abwasser 2"
	  %A0.4   P1      Meldeleuchte "Anlage EIN"
	  %A0.5   P2      Meldeleuchte "Störung"
	  %A0.6   P3      Meldeleuchte "Wasserstand <25%"
	  %A0.7   P4      Meldeleuchte "Wasserstand >75%"
	  
	  Simulierte digitale Sensoren und Taster, ausgehend von %EW0 am Ausgang #PAE_EW0:
	  %E0.0   S1      Schalter Anlage EIN/AUS (NO)
	  %E0.1   S2      Taster "Nutzwasser EIN" (NO)
	  %E0.2   S3      Taster "Nutzwasser AUS" (NC)
	  %E0.3   S4      Niveaumeldung 2 (NO)
	  %E0.5   B1      Sensor "Motoschutzrelais M1" (NC)
	  %E0.6   B2      Sensor "Motoschutzschalter M3" (NC)
	  %E0.7   B3      Sensor "Motoschutzschalter M4" (NC)
	  %E1.0   B11     Sensor "Wasserstand max." (NO, bei leerem Tank)
	  %E1.1   B12     Sensor "Wasserstand min." (NO, bei leerem Tank)
	  
	  Simulierte analoge Sensoren, ausgehend von %EW64 am Ausgang #PAE_EW64:
	  %EW64   B13     Sensor "Wasserstand" (0..10V)
	*)
	
	// Initialisierung der Simulation
	IF #Reset_Simulation THEN
	    #DI.S1 := FALSE;
	    #DI.S2 := FALSE;
	    #DI.S3 := FALSE;
	    
	    #Fuellstand := 52.3;
	    
	    #MSR_M1 := TRUE;
	    #MSS_M3 := TRUE;
	    #MSS_M4 := TRUE;
	    #Regenwasserzulauf := FALSE;
	END_IF;
	#Reset_Simulation := FALSE;
	
	// Abtastzyklus und dessen Flanke erzeugen
	#Abtastzyklus(IN := NOT #Speicher_Abtastflanke,
	              PT := T#100MS,
	              Q => #Speicher_Abtastflanke);
	
	IF NOT #Speicher_Abtastflanke OR #Pause_Simulation THEN
	    RETURN;
	END_IF;
	
	// Übernahme des PAA
	#DQ.M1 := (#PAA_AB0 AND 16#01) > 0;
	#DQ.M2 := (#PAA_AB0 AND 16#02) > 0;
	#DQ.M3 := (#PAA_AB0 AND 16#04) > 0;
	#DQ.M4 := (#PAA_AB0 AND 16#08) > 0;
	#DQ.P1 := (#PAA_AB0 AND 16#10) > 0;
	#DQ.P2 := (#PAA_AB0 AND 16#20) > 0;
	#DQ.P3 := (#PAA_AB0 AND 16#40) > 0;
	#DQ.P4 := (#PAA_AB0 AND 16#80) > 0;
	
	// MSR automatisch auslösen
	IF #MSR_M1 THEN
	    #MSR_M1_Timer(IN := #DQ.M1 AND (NOT #DQ.M2 OR #Fuellstand <= #Niveau_min_M1),
	                  PT := T#10S);
	    #MSR_M1 := NOT #MSR_M1_Timer.Q;
	ELSE
	    RESET_TIMER(#MSR_M1_Timer);
	END_IF;
	
	IF #MSS_M3 THEN
	    #MSS_M3_Timer(IN := #DQ.M3 AND #Fuellstand <= #Niveau_min_M34,
	                  PT := T#10S);
	    #MSS_M3 := NOT #MSS_M3_Timer.Q;
	ELSE
	    RESET_TIMER(#MSS_M3_Timer);
	END_IF;
	
	IF #MSS_M4 THEN
	    #MSS_M4_Timer(IN := #DQ.M4 AND #Fuellstand <= #Niveau_min_M34,
	                  PT := T#10S);
	    #MSS_M4 := NOT #MSS_M4_Timer.Q;
	ELSE
	    RESET_TIMER(#MSS_M4_Timer);
	END_IF;
	
	// Motorschutzschalter
	#DQ.M1 := #DQ.M1 AND #MSR_M1;
	#DQ.M3 := #DQ.M3 AND #MSS_M3;
	#DQ.M4 := #DQ.M4 AND #MSS_M4;
	
	// Behälter füllen bzw. entleeren
	#Fuellstand_kP := #Fuellstand_kP - BOOL_TO_INT(#DQ.M1 AND #DQ.M2) * 500 - BOOL_TO_INT(#DQ.M3) * 500 - BOOL_TO_INT(#DQ.M4) * 500 + BOOL_TO_INT(#Regenwasserzulauf) * 300;
	
	IF #DQ.M3 OR #DQ.M4 THEN
	    IF #Fuellstand_kP < 0 AND #Fuellstand <= #Niveau_min_M34 THEN
	        #Fuellstand_kP := 0;
	    END_IF;
	ELSIF #DQ.M1 AND #DQ.M2 THEN
	    IF #Fuellstand_kP < 0 AND #Fuellstand <= #Niveau_min_M1 THEN
	        #Fuellstand_kP := 0;
	    END_IF;
	END_IF;
	
	#Fuellstand := #Fuellstand + #Fuellstand_kP / 1000;
	#Fuellstand := LIMIT(IN := #Fuellstand, MN := 0, MX := 100);
	
	// Sensoren auswerten
	#AI_B13 := SCALE_X_INT(MIN := 0, MAX := 27648, VALUE := NORM_X_REAL(MIN := 0, MAX := 100, VALUE := #Fuellstand));
	#DI.B1 := #MSR_M1;
	#DI.B2 := #MSS_M3;
	#DI.B3 := #MSS_M4;
	#DI.B11 := (#Fuellstand >= 98);
	#DI.B12 := (#Fuellstand >= #Niveau_min_M34 + 2);
	
	// PAE ausgeben
	#PAE_EW0 := 16#0 OR BOOL_TO_WORD(#DI.B11);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.B12), N := 1);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.S1), N := 8);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.S2), N := 9);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(NOT #DI.S3), N := 10);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.S4), N := 11);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.B1), N := 13);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.B2), N := 14);
	#PAE_EW0 := #PAE_EW0 OR SHL(IN := BOOL_TO_WORD(#DI.B3), N := 15);
	
	//#PAE_EW0 := #DI_Word;
	#PAE_EW64 := INT_TO_WORD(#AI_B13);
END_FUNCTION_BLOCK

